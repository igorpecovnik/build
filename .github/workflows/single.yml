name: Single image update
  description: 'xComma delimited list'

on:

  workflow_dispatch:
    inputs:
      boards:
        description: 'Comma delimited list'
        required: true
        default: 'bananapi'
      version:
        description: 'V'
        required: false

jobs:

    prepare:

      name: Download sources
      runs-on: [self-hosted, Linux, X64]
      steps:

        - name: Fix permissions
          run: |

            sudo chown -R $USER:$USER .

        - name: Checkout Armbian build script
          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: nightly
            clean: false

        - name: Checkout Armbian support scripts
          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.PAT }}
            path: scripts
            clean: false

        - name: Import GPG key
          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
            passphrase: ${{ secrets.PASSPHRASE }}
            workdir: build
        - name: Build beta images
          env:
            GPG_PASS: ${{ secrets.PASSPHRASE }}
            REBUILD_IMAGES: ${{ github.event.inputs.boards }}
          run: |

            cd build

            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'
            PARALLEL_BUILDS=$(awk '{printf("%d",$1/4000)}' <<<$(($(LC_ALL=C free -w 2>/dev/null | grep "^Mem" | awk '{print $2}' || LC_ALL=C free | grep "^Mem"| awk '{print $2}')/1024)))

            # use prepared configs
            sudo cp ../scripts/configs/* userpatches/

            # cleaning leftovers if any
            rm -rf output/images/*
            rm -f userpatches/targets.conf

            echo "Log level: ${{ github.event.inputs.boards }}"

            REBUILD_IMAGES="rockpi-s"
            BETA="no"
            ./compile.sh single IGNORE_HASH="yes" REBUILD_IMAGES="${REBUILD_IMAGES}" KERNEL_ONLY="yes" BETA="$BETA" BUILD_ALL="yes" BSP_BUILD="yes" MAKE_ALL_BETA="yes"
            ./compile.sh single MULTITHREAD="${PARALLEL_BUILDS}" IGNORE_HASH="yes" IGNORE_UPDATES="yes" REBUILD_IMAGES="${REBUILD_IMAGES}" KERNEL_ONLY="no" BETA="$BETA" BUILD_ALL="yes" GPG_PASS="${GPG_PASS}"

        - name: Install SSH key for storage
          uses: shimataro/ssh-key-action@v2
          with:

            key: ${{ secrets.KEY_FOR_TORRENT }}
            known_hosts: ${{ secrets.KNOWN_HOSTS_TORRENT }}
            if_key_exists: replace

        - name: Deploy to server
          if: ${{ success() }}
          run: |

            sudo apt-get -y -qq install lftp
            sudo chown -R $USER:$USER $(pwd)/build/output/images/
            lftp -u upload, -e "set net:timeout 4;set net:max-retries 6;mirror --Remove-source-files -R --no-empty-dirs --parallel=8 --no-perms $(pwd)/build/output/images/ images/ ;bye" sftp://users.armbian.com

    torrents:

      name: Update download infrastructure
      needs: [prepare]
      runs-on: [self-hosted, Linux]

      steps:

        - name: Install SSH key for torrent
          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_FOR_TORRENT }}
            name: id_torrent # optional
            known_hosts: ${{ secrets.KNOWN_HOSTS_TORRENT }}
            if_key_exists: replace

        - name: Create torrents
          run: ssh -i ~/.ssh/id_torrent ${{ secrets.USER_TORRENT }}@${{ secrets.SSH_HOST }}

    finish:
      name: Cleaning
      needs: [torrents]
      runs-on: [self-hosted, Linux, big]
      steps:
        - name: Run script
          shell: bash {0}
          run: |
            echo "Stop"
