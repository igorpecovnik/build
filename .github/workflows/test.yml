name: CI
on:
  push:
    branches: master
  schedule:
    - cron:  '0 */3 * * *'
jobs:
    prepare:
      name: Prepare runner
      runs-on: [self-hosted, Linux, x64]
      steps:
        - name: Checkout Armbian build script
          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: nightly
            clean: false
        - name: Checkout Armbian support scripts
          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.PAT }}
            path: scripts
            clean: false
    common:
      name: Prepare scripts
      needs: prepare
      runs-on: [self-hosted, Linux, x64]
      steps:
        - run: |
            echo "BLTPATH=\"$(pwd)/build/\"" | tee scripts/cacherebuild.conf scripts/betarepository.conf >/dev/null
            cd build
            #[[ -n $(mount | grep hash-beta) ]] && sudo umount cache/hash-beta
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh BOARD=cubietruck BRANCH=current KERNEL_ONLY="yes" RELEASE=focal KERNEL_CONFIGURE="no" 'prepare_host'
            sudo cp ../scripts/configs/* userpatches/
            sudo sed -i "s/-it --rm/-i --rm/" config/templates/config-docker.conf
            #[[ -z $(mount | grep hash-beta) ]] && sudo mount ../scripts/hash-beta cache/hash-beta --bind
    docker:
      name: Create rootfs cache
      needs: common
      runs-on: [self-hosted, Linux, x64]
      steps:
        - run: |
            cd scripts
            run-one ./cacherebuild.sh
    cache:
      name: Create docker image @ Ubuntu Focal
      needs: common
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v1      
        - run: |
            sed -i "s/-it --rm/-i --rm/" config/templates/config-docker.conf
            touch .ignore_changes
            ./compile.sh docker KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'
            docker tag armbian:$(cat VERSION) armbian/build:latest
    kernels:
      name: Build changed kernels
      needs: common
      runs-on: [self-hosted, Linux, x64]
      steps:
        - run: |
            cd scripts
            run-one ./betarepository.sh
    sign:
      name:
      needs: cache
      runs-on: [self-hosted, Linux, x64]
      stepa:
        - 
        name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          git-user-signingkey: true
          git-commit-gpgsign: true
        -
        name: Sign commit and push changes
        env:
          PASSPHRASE: ${{ secrets.PASSPHRASE }}
        run: |          
          echo $PASSPHRASE | gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes VERSIO
    finish:
      name: 4. Cleaning
      needs: [docker, cache, kernels]
      runs-on: [self-hosted, Linux, x64]
      steps:
        - name: Run script
          shell: bash {0}
          run: |
            echo "xxxx"
