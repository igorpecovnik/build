name: CI
on:
  push:
    branches: master
  schedule:
    - cron:  '0 */3 * * *'
jobs:
    
    
    docker-bionic:
      name: Create Docker image on Bionic
      runs-on: ubuntu-18.04
      steps:
        - uses: actions/checkout@v1
        - run: |
            sed -i "s/-it --rm/-i --rm/" config/templates/config-docker.conf
            touch .ignore_changes
            ./compile.sh docker KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" \
            USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'



    docker-focal:
      name: Create Docker image on Focal
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v1
        - run: |
            sed -i "s/-it --rm/-i --rm/" config/templates/config-docker.conf
            touch .ignore_changes
            ./compile.sh docker KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" \
            USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'



    docker-hirsute:
      name: Create Docker image on Hirsute
      runs-on: [self-hosted, Linux, x64]
      steps:
        - name: Checkout Armbian build script
          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: nightly
            clean: false
        - run: |
            cd build
            sed -i "s/-it --rm/-i --rm/" config/templates/config-docker.conf
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh dockerpurge KERNEL_ONLY="yes" BOARD="bananapi" BRANCH="current" KERNEL_CONFIGURE="no" USE_TORRENT="yes" REPOSITORY_INSTALL="kernel" 'prepare_host'
 
    
    prepare:
      name: Prepare runner
      runs-on: [self-hosted, Linux, x64]
      steps:
        - name: Checkout Armbian build script
          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/build
            path: build
            ref: nightly
            clean: false
        - name: Checkout Armbian support scripts
          uses: actions/checkout@v2
          with:
            fetch-depth: 0
            repository: armbian/scripts
            token: ${{ secrets.PAT }}
            path: scripts
            clean: false
    common:
      name: Prepare scripts
      needs: prepare
      runs-on: [self-hosted, Linux, x64]
      steps:
        - run: |
            echo "BLTPATH=\"$(pwd)/build/\"" | tee scripts/cacherebuild.conf scripts/betarepository.conf >/dev/null
            cd build
            #[[ -n $(mount | grep hash-beta) ]] && sudo umount cache/hash-beta
            [[ ! -f .ignore_changes ]] && sudo touch .ignore_changes
            ./compile.sh BOARD=cubietruck BRANCH=current KERNEL_ONLY="yes" RELEASE=focal KERNEL_CONFIGURE="no" 'prepare_host'
            sudo cp ../scripts/configs/* userpatches/
            sudo rm -r output/debs/* 2> /dev/null
            sudo rm -r output/debs-beta/* 2> /dev/null
            sudo rm -f userpatches/targets.conf
            sudo sed -i "s/-it --rm/-i --rm/" config/templates/config-docker.conf
            #[[ -z $(mount | grep hash-beta) ]] && sudo mount ../scripts/hash-beta cache/hash-beta --bind
    cache:
      name: Create rootfs cache
      needs: common
      runs-on: [self-hosted, Linux, x64]
      steps:
        - run: |
            cd scripts
            run-one ./cacherebuild.sh
    kernels:
      name: Build changed kernels
      needs: [prepare, common]
      runs-on: [self-hosted, Linux, x64]
      steps:
        - run: |
            cd scripts
            run-one ./betarepository.sh
    edge-stable:
      name: Update edge kernels in stable repo
      needs: [prepare, common, kernels]
      runs-on: [self-hosted, Linux, x64]
      steps:
        - run: |
            cd build
            cat config/targets.conf | grep edge | grep cli | grep hirsute | sudo tee userpatches/targets.conf 1>/dev/null 
            ./compile.sh all-new-stable-kernels
            # upgrade only kernel packages
            find output/debs -mindepth 1 -maxdepth 1 -type d -print0  | xargs -0 rm -R 2> /dev/null
            rm -f output/debs/armbian-* 2> /dev/null
            rm -f output/debs/linux-libc-* 2> /dev/null
    sign:
      name: Sign rootfs caches
      needs: [prepare, common, cache]
      runs-on: [self-hosted, Linux, x64]
      steps:
        -
          run: |
            cd build
        - 
          name: Import GPG key
          uses: crazy-max/ghaction-import-gpg@v3
          with:
            gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
            passphrase: ${{ secrets.PASSPHRASE }}
            #git-user-signingkey: true
            #git-commit-gpgsign: true
        -
          name: Sign commit and push changes
          env:
            PASSPHRASE: ${{ secrets.PASSPHRASE }}
          run: |      
            cd build/cache/rootfs
            (for file in $(ls | cut -d. -f1-4 | sort -u); do
                if [ $(ls $file* | wc -l) -lt 3 ]; then
                   echo "$file"
                fi
            done) | parallel --jobs 32 'echo '${PASSPHRASE}' | sudo gpg --passphrase-fd 0 --armor --detach-sign --pinentry-mode loopback --batch --yes {}'
    torrents:
      name: Create torrents
      needs: [prepare, common,sign]
      runs-on: [self-hosted, Linux, x64]
      steps:
        - name: Install SSH key for torrent
          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_FOR_TORRENT }}
            name: id_torrent # optional
            known_hosts: ${{ secrets.KNOWN_HOSTS_TORRENT }}
            if_key_exists: replace
        - name: Create torrents
          run: ssh -i ~/.ssh/id_torrent ${{ secrets.USER_TORRENT }}@${{ secrets.SSH_HOST }}
    repository:
      name: Update repository
      needs: [prepare, common, kernels, edge-stable] 
      runs-on: [self-hosted, Linux, x64]
      steps:
        - name: Install SSH key for repository
          uses: shimataro/ssh-key-action@v2
          with:
            key: ${{ secrets.KEY_FOR_REPOSITORY }}
            name: id_repository # optional
            known_hosts: ${{ secrets.KNOWN_HOSTS_REPOSITORY }}
            if_key_exists: replace
        - name: Update repository
          run: ssh -i ~/.ssh/id_repository ${{ secrets.USER_REPOSITORY }}@${{ secrets.SSH_HOST }}
    finish:
      name: Cleaning
      needs: [prepare, common, docker-bionic, docker-focal, docker-hirsute, cache, kernels, edge-stable, sign, torrents]
      runs-on: [self-hosted, Linux, x64]
      steps:
        - name: Run script
          shell: bash {0}
          run: |
            echo "xxxx"
